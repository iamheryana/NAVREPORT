DROP TRIGGER IF EXISTS TI_M58PRED ON M58PRED CASCADE  ; 
DROP TRIGGER IF EXISTS TD_M58PRED ON M58PRED CASCADE  ; 
DROP FUNCTION IF EXISTS  FTA_M58PRED () CASCADE; 


CREATE OR REPLACE FUNCTION FTA_M58PRED() RETURNS TRIGGER AS $$
    BEGIN
	IF (TG_OP = 'INSERT') THEN
		UPDATE M57PREH M57U
		SET Recs=COALESCE(M58.DTL,0)
		FROM 
		(
		SELECT M57.KdJAsu,M57.lvlbenefit,COUNT(M58.KdJAsu) AS DTL
		FROM M57PREH M57
		LEFT JOIN M58PRED M58
		ON M58.KdJAsu=M57.KdJAsu and M58.LvlBenefit = M57.LvlBenefit 
		WHERE NEW.KdJAsu=M57.KdJAsu AND
		      NEW.LvlBenefit=M57.LvlBenefit	
		GROUP BY M57.KdJAsu,M57.lvlbenefit		
		) M58
		--
		WHERE M58.KdJAsu=M57U.KdJAsu and M58.LvlBenefit = M57U.LvlBenefit; 

		IF NOT FOUND THEN RETURN NULL; END IF;

		RETURN NEW;		      
	END IF; 
	
	IF (TG_OP = 'DELETE') THEN
		UPDATE M57PREH M57U
		SET Recs=COALESCE(M58.DTL,0)
		FROM 
		(
		SELECT M57.KdJAsu,M57.lvlbenefit,COUNT(M58.KdJAsu) AS DTL
		FROM M57PREH M57
		LEFT JOIN M58PRED M58
		ON M58.KdJAsu=M57.KdJAsu and M58.LvlBenefit = M57.LvlBenefit 
		WHERE OLD.KdJAsu=M57.KdJAsu AND
		      OLD.LvlBenefit=M57.LvlBenefit	
		GROUP BY M57.KdJAsu,M57.lvlbenefit		
		) M58
		--
		WHERE M58.KdJAsu=M57U.KdJAsu and M58.LvlBenefit = M57U.LvlBenefit; 
		      
		IF NOT FOUND THEN RETURN NULL; END IF;

		RETURN OLD;		      
	END IF; 	
    END;	
$$ LANGUAGE plpgsql;

/******
TRIGGER 
*******/
CREATE TRIGGER TI_M58PRED
AFTER INSERT ON M58PRED
    FOR EACH ROW EXECUTE PROCEDURE FTA_M58PRED();
------
CREATE TRIGGER TD_M58PRED
AFTER DELETE ON M58PRED
    FOR EACH ROW EXECUTE PROCEDURE FTA_M58PRED();    
    

