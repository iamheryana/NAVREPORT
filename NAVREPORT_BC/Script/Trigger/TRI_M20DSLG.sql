DROP TRIGGER IF EXISTS TI_M20DSLG ON M20DSLG CASCADE  ; 
DROP TRIGGER IF EXISTS TD_M20DSLG ON M20DSLG CASCADE  ; 
DROP FUNCTION IF EXISTS  FTA_M20DSLG () CASCADE; 
------------------------------
CREATE OR REPLACE FUNCTION FTA_M20DSLG() RETURNS TRIGGER AS $$
    BEGIN
	IF (TG_OP = 'INSERT') THEN
		UPDATE M19HSLG M19U
		SET Recs=COALESCE(M20.DTL,0)
		FROM 
		(
		SELECT M19.TipeLap,M19.FlgDpPt,M19.NomFormat,COUNT(M20.TipeLap) AS DTL
		FROM M19HSLG M19
		LEFT JOIN M20DSLG M20
		ON M19.TipeLap=M20.TipeLap AND M19.FlgDpPt=M20.FlgDpPt AND M19.NomFormat=M20.NomFormat
		WHERE NEW.TipeLap=M19.TipeLap AND
		      NEW.FlgDpPt=M19.FlgDpPt AND
		      NEW.NomFormat=M19.NomFormat  		
		GROUP BY M19.TipeLap,M19.FlgDpPt,M19.NomFormat
		) M20
		--
		WHERE M20.TipeLap=M19U.TipeLap AND
		      M20.FlgDpPt=M19U.FlgDpPt AND
		      M20.NomFormat=M19U.NomFormat;

		IF NOT FOUND THEN RETURN NULL; END IF;

		RETURN NEW;		      
	END IF; 

	IF (TG_OP = 'DELETE') THEN
		UPDATE M19HSLG M19U
		SET Recs=COALESCE(M20.DTL,0)
		FROM 
		(
		SELECT M19.TipeLap,M19.FlgDpPt,M19.NomFormat,COUNT(M20.TipeLap) AS DTL
		FROM M19HSLG M19
		LEFT JOIN M20DSLG M20
		ON M19.TipeLap=M20.TipeLap AND M19.FlgDpPt=M20.FlgDpPt AND M19.NomFormat=M20.NomFormat
		WHERE OLD.TipeLap=M19.TipeLap AND
		      OLD.FlgDpPt=M19.FlgDpPt AND
		      OLD.NomFormat=M19.NomFormat  		
		GROUP BY M19.TipeLap,M19.FlgDpPt,M19.NomFormat
		) M20
		--
		WHERE M20.TipeLap=M19U.TipeLap AND
		      M20.FlgDpPt=M19U.FlgDpPt AND
		      M20.NomFormat=M19U.NomFormat;
		      
		IF NOT FOUND THEN RETURN NULL; END IF;

		RETURN OLD;		      
	END IF; 	
    END;	
$$ LANGUAGE plpgsql;
---------------------
-- Trigger 
CREATE TRIGGER TI_M20DSLG
AFTER INSERT ON M20DSLG
    FOR EACH ROW EXECUTE PROCEDURE FTA_M20DSLG();
------
CREATE TRIGGER TD_M20DSLG
AFTER DELETE ON M20DSLG
    FOR EACH ROW EXECUTE PROCEDURE FTA_M20DSLG();    
-- End Trigger 

